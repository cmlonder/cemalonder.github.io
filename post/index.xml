<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Cemal Ã–nder</title>
    <link>http://cemalonder.com/post/</link>
      <atom:link href="http://cemalonder.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 12 Jul 2020 01:28:56 +0300</lastBuildDate>
    <image>
      <url>http://cemalonder.com/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>http://cemalonder.com/post/</link>
    </image>
    
    <item>
      <title>Go Sonar Integration Using Docker - Chapter 1</title>
      <link>http://cemalonder.com/post/go-sonar-integration-using-docker-chapter-1/</link>
      <pubDate>Sun, 12 Jul 2020 01:28:56 +0300</pubDate>
      <guid>http://cemalonder.com/post/go-sonar-integration-using-docker-chapter-1/</guid>
      <description>&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;In this series, I&amp;rsquo;m going to integrate a Go project with Sonar using Docker.

&lt;a href=&#34;http://cemalonder.com/post/go-sonar-integration-using-containers-chapter-1&#34;&gt;Chapter 1&lt;/a&gt; will be about creating a go application, writing unit tests, and generating code coverage then sending this
report to SonarQube.
&lt;a href=&#34;&#34;&gt;Chapter 2 - TBD&lt;/a&gt; will be about using Sonar to fail pipeline based on the Quality report.&lt;/p&gt;
&lt;h3 id=&#34;1-create-a-simple-todo-app&#34;&gt;1. Create a Simple Todo App&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s first create an empty project and initialize go modules.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir go-dockerized-coverage
cd go-dockerized-coverage
go mod init cemalonder.com/go/todo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a todo folder and todo.go file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir todo
touch todo.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And write a simple Todo App with 2 functions; &lt;strong&gt;Add&lt;/strong&gt; and &lt;strong&gt;Complete&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Package todo provides a simple todo application
package todo

import &amp;quot;errors&amp;quot;

// Todo representation of todo with id, title and completed status
type Todo struct {
   Id       int
   Title    string
   Completed bool
}

// TodoApp holds todo list and id counter
type TodoApp struct {
   todos map[int]Todo
   id int
}

// CreateTodoApp creates a new TodoApp by initializing todo list and id counter
func CreateTodoApp() TodoApp {
   todoApp := TodoApp{}
   todoApp.todos = make(map[int]Todo)
   todoApp.id = 0
   return todoApp
}

// Add adds a new todo with given title and returns created todo with a new id
func (app *TodoApp) Add(title string) Todo {
   app.id = app.id + 1
   app.todos[app.id] = Todo{app.id, title, false}
   return app.todos[app.id]
}

// Complete completes a todo with given id and
// returns todo not found exception if todo with given id is not found
func (app *TodoApp) Complete(id int) error {
   if todo, ok := app.todos[id]; ok {
      todo.Completed = true
      app.todos[id] = todo
      return nil
   } else {
      return errors.New(&amp;quot;todo not found&amp;quot;)
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-write-unit-tests&#34;&gt;2. Write Unit Tests&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s create some unit tests for our Todo App. My Complete function contains some business logic which I can write
unit tests. I will consider business cases first, then implement them;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I complete a todo which exists, I expect it&amp;rsquo;s completed state is true&lt;/li&gt;
&lt;li&gt;When I complete a todo which does not exist, I expect an error&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;package todo_test

import (
   &amp;quot;testing&amp;quot;
)

func TestCompleteForFoundTodo(t *testing.T) {
   app := CreateTodoApp()
   todo := app.Add(&amp;quot;Wake up early&amp;quot;)
   if todo.Completed {
      t.Error(&amp;quot;Expected completed is false, but it is true&amp;quot;)
   }

   err := app.Complete(todo.Id)

   if err != nil {
      t.Errorf(&amp;quot;Expected error is nil, but it is %v&amp;quot;, err)
   }

   if todo.Completed {
      t.Error(&amp;quot;Expected completed is true, but it is false&amp;quot;)
   }
}

func TestCompleteForNotFoundTodo(t *testing.T) {
   app := CreateTodoApp()
   err := app.Complete(1)
   if err == nil {
      t.Errorf(&amp;quot;Expected error is not nil, but it is %v&amp;quot;, err)
   }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m following some testing conventions above which starts with TestXxx(*testing.T). And also my package
name is todo_test. Since this post is about integrating Go with Sonar I will let keep them for another post, let&amp;rsquo;s
continue with generating code coverage.&lt;/p&gt;
&lt;h3 id=&#34;3-generate-code-coverage&#34;&gt;3. Generate Code Coverage&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run and generate coverage for our project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go test ./... -v -coverprofile=coverage.out -covermode=count -coverpkg=./...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if summarize what is above command and its flag is doing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;go test ./&amp;hellip;&lt;/strong&gt; = running all the tests in current and all sub-folders&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-v&lt;/strong&gt; = print full output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-coverprofile=coverage.out&lt;/strong&gt; = write coverage to the given file, here we write to coverage.out&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-covermode=count&lt;/strong&gt; = Sets the mode for coverage analyses, here we set to count which shows how many times statements are run&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-coverpkg=./&amp;hellip;&lt;/strong&gt; = apply coverage for all matching pattern, here we applied current and all sub-folders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the detailed list of all flags for go test command, see 
&lt;a href=&#34;https://golang.org/pkg/cmd/go/internal/test/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we have a coverage.out generated in the root of the project content like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; mode: count
  cemalonder.com/go/todo/main.go:3.14,4.2 0 0
  cemalonder.com/go/todo/todo/todo.go:20.30,25.2 4 2
  cemalonder.com/go/todo/todo/todo.go:28.44,32.2 3 1
  cemalonder.com/go/todo/todo/todo.go:36.44,37.35 1 2
  cemalonder.com/go/todo/todo/todo.go:37.35,41.3 3 1
  cemalonder.com/go/todo/todo/todo.go:41.8,43.3 1 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is sending this coverage to Sonar so we can visualize it.&lt;/p&gt;
&lt;h3 id=&#34;4-start-local-sonarqube&#34;&gt;4. Start Local SonarQube&lt;/h3&gt;
&lt;p&gt;Even you will send your reports to a Sonar instance which you have in your company&amp;rsquo;s server, let&amp;rsquo;s try everything first
locally. It will be pretty easy using Docker.&lt;/p&gt;
&lt;p&gt;Start a new SonarQube container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm -p 9000:9000 sonarqube
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we summarize above command;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installs &lt;strong&gt;sonarqube&lt;/strong&gt; image if it does not exist locally&lt;/li&gt;
&lt;li&gt;Creates a container from this image&lt;/li&gt;
&lt;li&gt;Starts this container&lt;/li&gt;
&lt;li&gt;Forwards internal 9000 port of docker to host (localhost in this case) so you can access it via [localhost:9000]&lt;/li&gt;
&lt;li&gt;Removes container (&amp;ndash;rm) when it is stopped so you don&amp;rsquo;t run out of space (you still have the image)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we have a locally running sonarqube with no persistency (in-memory), so you will lose your pushed reports when you
restart your container but it is okay for our case since we want to test our reports.&lt;/p&gt;
&lt;p&gt;If you visit 
&lt;a href=&#34;&#34;&gt;localhost:9000&lt;/a&gt; in your browser you will see local SonarQube instance with 0 projects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sonarqube.png&#34; alt=&#34;sonarqube&#34;&gt;&lt;/p&gt;
&lt;p&gt;We need to push our project to SonarQube. Let&amp;rsquo;s continue with the next step.&lt;/p&gt;
&lt;h3 id=&#34;5-configure-sonar-in-project&#34;&gt;5. Configure Sonar in Project&lt;/h3&gt;
&lt;p&gt;We need some configuration in our project before we push it to the SonarQube. In the next step, we will be using SonarScanner
which requires sonar-project.properties configured in the project. By default, it should be located at the root of the project.
Let&amp;rsquo;s create &lt;strong&gt;sonar-project.properties&lt;/strong&gt; in the root of the project and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch sonar-project.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And its content is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sonar.language=go
# This should be unique in SonarQube
sonar.projectKey=simple-todo-app
sonar.projectName=Simple Todo Application
sonar.go.coverage.reportPaths=coverage.out
sonar.exclusions=**/*_test.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we summarize the properties used above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sonar.language&lt;/strong&gt; = we are setting our language but SonarQube also capable of guessing it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sonar.projectKey&lt;/strong&gt; = this should be unique in your SonarQube instance&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sonar.projectName&lt;/strong&gt; = this will be shown in the UI as a name of our project&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sonar.go.coverage.reportPaths&lt;/strong&gt; = we show our &lt;strong&gt;coverage.out&lt;/strong&gt; which we generated in 
&lt;a href=&#34;#2-write-unit-tests&#34;&gt;write unit tests&lt;/a&gt; step&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sonar.exclusions&lt;/strong&gt; = we are excluding _test.go files since we don&amp;rsquo;t want to get coverage of tests itself
All of the properties can be found 
&lt;a href=&#34;https://docs.sonarqube.org/latest/analysis/analysis-parameters/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have configured our project. The last step is pushing these to the SonarQube instance.&lt;/p&gt;
&lt;h3 id=&#34;6-send-coverage-report-to-sonarqube-using-sonarscanner&#34;&gt;6. Send Coverage Report to SonarQube using SonarScanner&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/SonarSource/sonar-scanner-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SonarScanner&lt;/a&gt; is a tool used to run code analysis on SonarQube instance.
To use this we should install it locally and run against our project which has code coverage generated and sonar-project.properties
configured. But instead of installing locally, I would like to do this step also with Docker since SonarQube officially provides a 
&lt;a href=&#34;https://hub.docker.com/r/sonarsource/sonar-scanner-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker image&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;Before running the sonar-scanner-cli docker command you should get your local IP since we will need it in the next step.
For this type &lt;code&gt;ipconfig&lt;/code&gt; if you are working in Windows or &lt;code&gt;ifconfig&lt;/code&gt; if you are in a Linux based Operating System. Then
take note of your &lt;strong&gt;IPv4 Adress&lt;/strong&gt; for the valid Adapter, in my case I&amp;rsquo;m working via Wireless so I take note of my 
&lt;strong&gt;Wireless Lan adapter Wi-Fi&lt;/strong&gt; which is 192.168.0.11 as follows&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ip-address.png&#34; alt=&#34;ip address&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now run following command in the shell (run it in PowerShell if you are in windows otherwise ${PWD} does not work)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; docker run --rm -e SONAR_HOST_URL=http://192.168.0.11:9000 -v ${PWD}:/usr/src sonarsource/sonar-scanner-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we summarize above command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installs &lt;strong&gt;sonarsource/sonar-scanner-cli&lt;/strong&gt; image if it does not exist locally&lt;/li&gt;
&lt;li&gt;Creates a container from this image&lt;/li&gt;
&lt;li&gt;Starts this container&lt;/li&gt;
&lt;li&gt;Sets &lt;strong&gt;SONAR_HOST_URL&lt;/strong&gt; environment variable to show where SonarQube runs&lt;/li&gt;
&lt;li&gt;Creates a volume from &lt;strong&gt;/usr/src&lt;/strong&gt; to your local (${PWD} or give your absolute path like /c/yourUser/yourProject) so
sonar-scanner-cli can use your local project and its properties (sonar-project.properties)&lt;/li&gt;
&lt;li&gt;Removes container (&amp;ndash;rm) when it is stopped so you don&amp;rsquo;t run out of space (you still have the image)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In your terminal you should see an &lt;strong&gt;EXECUTION SUCCESS&lt;/strong&gt; message with a log similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...More logs...
INFO: Analysis report generated in 134ms, dir size=80 KB
INFO: Analysis report compressed in 681ms, zip size=12 KB
INFO: Analysis report uploaded in 260ms
INFO: ANALYSIS SUCCESSFUL, you can browse http://192.168.0.11:9000/dashboard?id=simple-todo-app
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http://192.168.0.11:9000/api/ce/task?id=AXNFIP_bMJij3EBEF7zK
INFO: Analysis total time: 5.375 s
INFO: ------------------------------------------------------------------------
INFO: EXECUTION SUCCESS
INFO: ------------------------------------------------------------------------
INFO: Total time: 12.923s
INFO: Final Memory: 13M/47M
INFO: ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can not use http://localhost:9000 instead of http://192.168.0.11:9000 since sonar-scanner-cli Docker container runs
on its host and &lt;strong&gt;localhost&lt;/strong&gt; for that container is not same address with localhost of yours (at least in Windows, Mac&amp;rsquo;s 
docker daemon may be editing etc/hosts files so users in Mac MAY be using localhost even they are working in Docker)&lt;/p&gt;
&lt;p&gt;Now if you visit [http://localhost:9000] again, you will see there is 1 project now. Click on that and here is our report:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sonar-analyse.png&#34; alt=&#34;sonar analyse&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since Sonar has default Quality Gates configured, I&amp;rsquo;m now passing all of the scores and we have &lt;strong&gt;Passed&lt;/strong&gt; status.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we write a simple Go project, generate coverage report, configure SonarScanner, and analyze our project in Sonar.
The next chapter will be about integrating this project to Jenkins and reject our pipeline based on the project quality report.&lt;/p&gt;
&lt;p&gt;You can find source code of this project in 
&lt;a href=&#34;https://github.com/cmlonder/go-dockerized-coverage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;&#34;&gt;https://docs.sonarqube.org/latest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;&#34;&gt;https://blog.golang.org/cover&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Welcome Back Clean Code</title>
      <link>http://cemalonder.com/post/welcome-back-clean-code/welcome-back-clean-code/</link>
      <pubDate>Mon, 13 Jan 2020 07:14:38 +0300</pubDate>
      <guid>http://cemalonder.com/post/welcome-back-clean-code/welcome-back-clean-code/</guid>
      <description>&lt;p&gt;I recently read an 
&lt;a href=&#34;https://overreacted.io/goodbye-clean-code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;article&lt;/a&gt; from Dan Abramov who is the creator of Redux.
Even if I agree his article point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Donâ€™t be a clean code zealot. Clean code is not a goal. Itâ€™s an attempt to make some sense out of the immense complexity of systems weâ€™re dealing with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t agree how misleading his article title and how not descriptive his example. Because this kind of titles &amp;ldquo;Goodbye Clean Code&amp;rdquo;
gives power to another kind of zealots who hates some Software Principles or hates someone around him mentioning this kind of
principles. When you title your article like this, it is too easy being used as a power in social medias to be offensive against
software principles just by mentioning your article without any arguments to use with your own. Also think about how many people exist who
never know Clean Coding principles but using your article just as a weapon against it instead of his own experiences.
Rather I like the people who has deep knowledge of Clean Coding and Refactoring and can give some advice where to use them
properly and giving me awareness of it (which is probably aim of this article but I find it misleading and insufficient)&lt;/p&gt;
&lt;p&gt;Just for an idea, you can google &amp;ldquo;OOP sucks&amp;rdquo; or ironically &amp;ldquo;Goodbye Redux&amp;rdquo; to see
how zealots use this kind of titles where I both like OOP and Redux.&lt;/p&gt;
&lt;p&gt;Dan mentions 2 points to give you the awareness beside his title, lets have a look at them:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firstly, I didnâ€™t talk to the person who wrote it. I rewrote the code and checked it in without their input. Even if it was an improvement (which I donâ€™t believe anymore), this is a terrible way to go about it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is the right way you should do when you are truly doing refactoring. You don&amp;rsquo;t have to talk the person directly
if you are doing refactoring, you should be in trust with unit tests. And if the code has a little indicators of clean coding
than you should have general idea why the code is structured like that or your team must have some documentations for exceptions.
What if the person who writes the line leaves the job? You still contact them personally? No, we don&amp;rsquo;t. We make unit &amp;amp; integration tests,
properly structure our code with internally documenting (in our code) and finally we may have externally documentation for exceptional cases.&lt;/p&gt;
&lt;p&gt;And Dan&amp;rsquo;s second mention:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, we later needed many special cases and behaviors for different handles on different shapes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I first read these lines, I say myself &amp;ldquo;finally I will see the point and understand what happened in above code, and
satisfied with his argument in title&amp;rdquo;. It did not happen. He gave me lots of lines above which than I was expecting to see some evidence or
some real results. But instead I read something like &amp;ldquo;special cases&amp;rdquo; which does not give me the idea.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What special cases did he need?&lt;/li&gt;
&lt;li&gt;What should we learn when we refactored like above?&lt;/li&gt;
&lt;li&gt;Which points we should be more careful?&lt;/li&gt;
&lt;li&gt;How did your &amp;ldquo;refactorings&amp;rdquo; are merged, any Pull Request? Who is the reviewer, where is the discussion, did your boss call only you?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I said before, I know his point. But title, arguments he show and how article is being mentioned in twitter, reddit and
lots of other social medias is dangerous. If you trust that who uses this article has deep knowledge in software principles,
software architectures etc. than we don&amp;rsquo;t have any discussions here. When I start searching if there are some people thinking like me
than I see this 
&lt;a href=&#34;https://www.reddit.com/r/programming/comments/eng355/goodbye_clean_code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;discussion&lt;/a&gt; on reddit and it
pleased me that they exist.&lt;/p&gt;
&lt;p&gt;If Dan wants to say &amp;ldquo;Great power comes with great responsibility&amp;rdquo;, I agree. But it is already mentioned by Stan Lee and can
be applied in any area of our live with example real life scenarios. If we know all this kind of principles, we should be careful when &amp;amp; where to apply them.
But to get this experience we should first read &amp;amp; get deep knowledge of them, make some mistake and learn from our mistakes.
Otherwise it is too easy for people never read refactoring, clean coding, YAGNI, DRY etc. and only mentioning around this
kind of articles as an excuse of not knowing this principles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Layer and 5 Tier Architecture</title>
      <link>http://cemalonder.com/post/5-layer-and-5-tier-architecture/</link>
      <pubDate>Fri, 13 Sep 2019 08:37:57 +0300</pubDate>
      <guid>http://cemalonder.com/post/5-layer-and-5-tier-architecture/</guid>
      <description>&lt;p&gt;There are differences between N-layer and N-tier definitions. We can start with explaining those first:&lt;/p&gt;
&lt;h2 id=&#34;5-layer-architecture&#34;&gt;5-layer Architecture&lt;/h2&gt;
&lt;p&gt;Layering is logical separation that you implement in your application. It has a relation with N-Tier but we will
move onto it later:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./5-layer.png&#34; alt=&#34;5-layer&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;presentation&#34;&gt;Presentation&lt;/h3&gt;
&lt;p&gt;This is how your application is shown to the user. You can think about it is a look and feel of the application.
But it is very similar to the UI layer, today&amp;rsquo;s world with the improvement of JavaScript (client-side-rendering solutions like React, Angular, etc.) this separation may not be seem exact
but still makes sense, let me continue:&lt;/p&gt;
&lt;h3 id=&#34;ui&#34;&gt;UI&lt;/h3&gt;
&lt;p&gt;This is where user interactions are interpreted. What happens when user clicks submit button, how the data is sent to
the server and retrieved? If you think about server-side rendering which we used older times, we were all interpreting
those and returning user fully ready HTML page but today with client-side-rendering all of those works are done in the
user&amp;rsquo;s browser with the help of JavaScript. So you can think about now Presentation + UI is done in users server
(phone, pc etc.) if client-side-rendering is used. If the user&amp;rsquo;s server is only responsible for showing the data,
now the Presentation layer takes place there while UI layer takes place in our server.&lt;/p&gt;
&lt;h3 id=&#34;business-logic&#34;&gt;Business Logic&lt;/h3&gt;
&lt;p&gt;This is the place where we are responsible for data validation (even if you did it in client-side,
we should do in server-side too because we never trust to clients), manipulation, security, processing,
database lookups, etc. takes place. Those responsibilities can be shared between UI side and Data Access depending
on the action&amp;rsquo;s security scope&lt;/p&gt;
&lt;h3 id=&#34;data-access&#34;&gt;Data Access&lt;/h3&gt;
&lt;p&gt;This is where you abstract to insert, delete, etc. actions that you need to do on the DataBase (Data Storage level).
It kinda interfaces between DataBases and your application&lt;/p&gt;
&lt;h3 id=&#34;data-storage&#34;&gt;Data Storage&lt;/h3&gt;
&lt;p&gt;This is were database servers belong. This is the implementation of the
Data Access layer which psychically inserts, deletes, etc. data on the server.&lt;/p&gt;
&lt;h2 id=&#34;5-tier-architecture&#34;&gt;5-Tier Architecture&lt;/h2&gt;
&lt;p&gt;Now depending on your application&amp;rsquo;s needs, you should define your trade-offs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you want to achieve?&lt;/li&gt;
&lt;li&gt;How much do you want to scale?&lt;/li&gt;
&lt;li&gt;What is your acceptable latency?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you achieve low latency and you don&amp;rsquo;t aim to be used by too many users, you can start with 1-tier.
In the below demonstrations keep in mind that the business logic layer can be done in any layers as long as you keep
security reasons, you can have some general/simple business logic in client-side (Presentation/UI layers) too which may
increase your servers performance. Also, you can put UI layer in higher/lower tiers depend on using server-side or
client-side rendering but we talked about general idea above:&lt;/p&gt;
&lt;h3 id=&#34;1-tier&#34;&gt;1-tier&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./1-tier.png&#34; alt=&#34;1-tier&#34;&gt;&lt;/p&gt;
&lt;p&gt;All layers belong to one physical location. Like a game that installed on the user&amp;rsquo;s database and
doesn&amp;rsquo;t request any other external system, it has own database on the user&amp;rsquo;s server and all logics implemented there.&lt;/p&gt;
&lt;h3 id=&#34;2-tier&#34;&gt;2-tier&lt;/h3&gt;
&lt;p&gt;Lets say you want to central database management and all other parts can remain still user&amp;rsquo;s server, like hes is
playing a game on mobile-phone but data is stored in our servers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./2-tier.png&#34; alt=&#34;2-tier&#34;&gt;&lt;/p&gt;
&lt;p&gt;Up to now, you have a performance advantage. If you need to support more users and need more security
than you need &lt;strong&gt;scalability&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;3-tier&#34;&gt;3-tier&lt;/h3&gt;
&lt;p&gt;Beside microservices (maybe another discussion topic), this is one of the most used architecture.
Presentation and UI is on the user&amp;rsquo;s server (client), business logic and data access belongs to application server,
and data storage is in another server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./3-tier.png&#34; alt=&#34;3-tier&#34;&gt;&lt;/p&gt;
&lt;p&gt;But now your user&amp;rsquo;s request is jumping more tier&amp;rsquo;s which will increase your network latency.
As talked before it is about trade-offs. Also now you started to have benefit of scaling like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./3-tier-scaled.png&#34; alt=&#34;3-tier-scaled&#34;&gt;&lt;/p&gt;
&lt;p&gt;So depending on your application needs, security levels, latency limits, user counts etc. You can split it up to
more tiers which is it the reason why its name is N-Tier.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expert C#2006 Business Objects - Rockford Lhotka&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software Architecture Patterns - Mark Richards&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
